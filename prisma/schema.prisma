generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PRISMA_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  skype         String?
  telegram      String?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  role          Int             @default(2)     // Default to role 2 (webmaster/regular user)
  apiKey        String?         @unique

  // Site access flags - users can have access to both sites
  ezcasino      Boolean         @default(true)  // Access to EZ Casino Affiliates
  allmedia      Boolean         @default(false) // Access to All Media Matter

  // Affiliate/Referral Program
  referralCode  String?         @unique         // Unique code for referral links
  referredById  String?                         // User who referred this user
  commissionRate Decimal        @default(15)    @db.Decimal(5, 2) // Commission percentage (default 15%)

  accounts      Account[]
  Authenticator Authenticator[]
  bids          Bid[]
  sessions      Session[]
  affiliates    UserAffiliate[]

  // Site management relations
  sites             Site[]
  subscriptions     Subscription[]
  payments          Payment[]
  radiumCredit      RadiumCredit?
  radiumTransactions RadiumTransaction[]
  radiumUsage       RadiumUsage[]

  // Forum relations
  forumTopics        ez_forum_topics[]
  forumPosts         ez_forum_posts[]
  sentMessages       ez_forum_private_messages[]     @relation("SentMessages")
  messageParticipants ez_forum_message_participants[]
  topicFollowers     ez_forum_topic_followers[]

  // Notification relations
  notifications      Notification[]

  // Affiliate/Referral relations
  referredBy           User?                 @relation("UserReferrals", fields: [referredById], references: [id], onDelete: SetNull)
  referrals            User[]                @relation("UserReferrals")
  commissionsEarned    AffiliateCommission[] @relation("ReferrerCommissions")
  commissionsGenerated AffiliateCommission[] @relation("ReferredUserCommissions")

  @@index([referralCode])
  @@index([referredById])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Terms {
  id        String   @id @default(cuid())
  version   Int
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Site Management Models

model Site {
  id              String          @id @default(cuid())
  userId          String
  domain          String
  apiKey          String          @unique
  name            String?
  description     String?

  // Status tracking
  isActive        Boolean         @default(false)
  status          SiteStatus      @default(INACTIVE)

  // Subscription tracking
  subscriptionId  String?         @unique
  subscription    Subscription?   @relation(fields: [subscriptionId], references: [id])

  // Feature flags
  hasGameScreenshots Boolean      @default(false)
  hasBonusCodeFeed   Boolean      @default(false)

  // Metadata
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  lastAccessAt    DateTime?

  // Relations
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiUsage           ApiUsage[]
  radiumUsage        RadiumUsage[]
  radiumTransactions RadiumTransaction[]

  @@unique([userId, domain])
  @@index([userId])
  @@index([apiKey])
  @@index([status])
  @@index([isActive])
}

enum SiteStatus {
  INACTIVE
  ACTIVE
  SUSPENDED
  CANCELLED
}

model Subscription {
  id                    String              @id @default(cuid())
  siteId                String              @unique
  userId                String

  // Plan details
  plan                  SubscriptionPlan    @default(BASIC)
  status                SubscriptionStatus  @default(PENDING)

  // Pricing (annual)
  amount                Decimal             @db.Decimal(10, 2)
  monthlyRate           Decimal             @db.Decimal(10, 2)
  currency              String              @default("USD")
  billingPeriod         String              @default("YEARLY")

  // Dates
  startDate             DateTime?
  endDate               DateTime?
  nextBillingDate       DateTime?
  cancelledAt           DateTime?

  // Payment tracking
  stripeSubscriptionId  String?             @unique
  stripeCustomerId      String?
  lastPaymentDate       DateTime?
  lastPaymentAmount     Decimal?            @db.Decimal(10, 2)

  // Auto-renewal
  autoRenew             Boolean             @default(true)

  // Metadata
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  // Relations
  site                  Site?
  user                  User                @relation(fields: [userId], references: [id])
  payments              Payment[]
  affiliateCommissions  AffiliateCommission[]

  @@index([userId])
  @@index([status])
  @@index([stripeSubscriptionId])
  @@index([endDate])
}

enum SubscriptionPlan {
  BASIC
  PRO
  EVERYTHING
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  PAST_DUE
  CANCELLED
  EXPIRED
}

model Payment {
  id                    String          @id @default(cuid())
  subscriptionId        String?
  userId                String
  siteId                String?

  // Payment details
  amount                Decimal         @db.Decimal(10, 2)
  currency              String          @default("USD")
  status                PaymentStatus   @default(PENDING)
  type                  PaymentType     @default(SUBSCRIPTION)

  // Stripe integration
  stripePaymentIntentId String?         @unique
  stripeInvoiceId       String?         @unique

  // Metadata
  description           String?
  metadata              Json?
  paidAt                DateTime?
  createdAt             DateTime        @default(now())

  // Relations
  subscription          Subscription?   @relation(fields: [subscriptionId], references: [id])
  user                  User            @relation(fields: [userId], references: [id])
  affiliateCommissions  AffiliateCommission[]

  @@index([userId])
  @@index([subscriptionId])
  @@index([status])
  @@index([stripePaymentIntentId])
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentType {
  SUBSCRIPTION
  RADIUM_CREDITS
  ADDON
}

model RadiumCredit {
  id            String              @id @default(cuid())
  userId        String              @unique

  // Balance
  balance       Int                 @default(0)
  lifetime      Int                 @default(0)

  // Metadata
  updatedAt     DateTime            @updatedAt
  createdAt     DateTime            @default(now())

  // Relations
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  RadiumTransaction[]

  @@index([userId])
}

model RadiumTransaction {
  id              String                @id @default(cuid())
  userId          String
  creditId        String

  // Transaction details
  type            RadiumTransactionType
  amount          Int
  balance         Int

  // For purchases
  cost            Decimal?              @db.Decimal(10, 2)
  currency        String?               @default("USD")
  stripePaymentIntentId String?         @unique

  // For usage
  siteId          String?
  description     String?

  // Metadata
  createdAt       DateTime              @default(now())

  // Relations
  user            User                  @relation(fields: [userId], references: [id])
  credit          RadiumCredit          @relation(fields: [creditId], references: [id])
  site            Site?                 @relation(fields: [siteId], references: [id])

  @@index([userId])
  @@index([creditId])
  @@index([type])
  @@index([createdAt])
}

enum RadiumTransactionType {
  PURCHASE
  USAGE
  REFUND
  ADMIN_ADJUST
  BONUS
}

model RadiumUsage {
  id              String    @id @default(cuid())
  userId          String
  siteId          String

  // Usage details
  feature         String
  creditsUsed     Int
  quantity        Int?

  // Metadata
  metadata        Json?
  createdAt       DateTime  @default(now())

  // Relations
  user            User      @relation(fields: [userId], references: [id])
  site            Site      @relation(fields: [siteId], references: [id])

  @@index([userId])
  @@index([siteId])
  @@index([feature])
  @@index([createdAt])
}

model ApiUsage {
  id              String    @id @default(cuid())
  siteId          String

  // Request details
  endpoint        String
  method          String
  statusCode      Int

  // Usage tracking
  requestCount    Int       @default(1)
  responseTime    Int?

  // Rate limiting
  hour            DateTime

  // Metadata
  ipAddress       String?
  userAgent       String?
  createdAt       DateTime  @default(now())

  // Relations
  site            Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId])
  @@index([hour])
  @@index([endpoint])
  @@index([createdAt])
}

model Affiliate {
  id           Int                @id @default(autoincrement())
  aff_name     String
  aff_url      String
  referralLink String?
  advert       String?
  manager      String?
  block        Int?               @default(0)
  createdAt    DateTime           @default(now())
  managers     UserAffiliate[]
  casinos      casino_p_casinos[]
}

model UserAffiliate {
  id          Int       @id @default(autoincrement())
  userId      String
  affiliateId Int
  createdAt   DateTime  @default(now())
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, affiliateId])
  @@index([userId])
  @@index([affiliateId])
}

model casino_p_casinos {
  id                        Int                      @id @default(autoincrement())
  aff_id                    Int?
  casino                    String?
  type                      String?                  @default("Casino")
  url                       String?
  software                  String?
  approved                  Int?                     @default(0)
  updated                   String?
  hot                       Int?                     @default(0)
  new                       Int?                     @default(0)
  rogue                     Int?                     @default(0)
  button                    String?
  blurb                     String?
  softwareid                Int?                     @default(0)
  telephone                 String?                  @default("")
  contactemail              String?                  @default("")
  livechat                  Int?                     @default(0)
  mobile                    Int?                     @default(0)
  homepageimage             String?
  livegames                 Int?                     @default(0)
  clean_name                String?                  @default("")
  currencies                String?                  @default("")
  currency_val              Int?                     @default(0)
  review_overall            Int?                     @default(0)
  nodeposit                 Int?                     @default(0)
  freespins                 Int?                     @default(0)
  bonus_percent             Int?                     @default(0)
  deposit                   Int?                     @default(0)
  vercel_image_url          String?
  vercel_image_size         Int?                     @default(0)
  vercel_casino_button      String?
  vercel_casino_button_size Int?                     @default(0)
  lcb_url                   String?
  timestamp                 Int?                     @default(0)
  rad_updated              DateTime?
  casinoMappings            CasinoNameMapping[]
  importedBonuses           ImportedBonus[]
  Postback                  Postback[]
  unifiedBonuses            UnifiedBonus[]
  banklist                  casino_p_bank_connect[]
  bonuses                   casino_p_bonus[]
  affiliate                 Affiliate?               @relation(fields: [aff_id], references: [id])
  jurisdictions             casino_p_jurisdictions[]
  ppc                       casino_p_ppc[]
  casino_geo                casino_p_restrictions[]
  softwares                 casino_p_software_link[]
  outbounding               outbounding[]
  ppc_links                 ppc_links[]
}

model casino_p_ppc {
  id      Int              @id @default(autoincrement())
  casino  Int
  ppc_url String
  casinos casino_p_casinos @relation(fields: [casino], references: [id], onDelete: Cascade)
}

model casino_p_software {
  id                Int                      @id @default(autoincrement())
  software_name     String?
  status            Int?
  link              String?
  smallimage        String?
  image             String?
  show              Int?
  vercel_image_url  String?
  vercel_image_size Int?
  slots_launch_id   Int?
  rad_updated       DateTime?
  games             casino_p_games[]
  softwarelist      casino_p_software_link[]

  @@index([rad_updated])
}

model casino_p_software_link {
  id           Int                @id @default(autoincrement())
  casino       Int?
  software     Int?
  softwares    casino_p_casinos?  @relation(fields: [casino], references: [id], onDelete: Cascade)
  softwarelist casino_p_software? @relation(fields: [software], references: [id], onDelete: Cascade)

  @@unique([casino, software])
  @@index([casino, software])
}

model casino_p_lcb_juristrictions {
  id                Int                      @id @default(autoincrement())
  name              String
  status            Int                      @default(1)
  rad_updated       DateTime?                @updatedAt
  jurisdiction_data casino_p_jurisdictions[]

  @@index([rad_updated])
  @@index([status])
}

model casino_p_jurisdictions {
  jid               Int                         @id @default(autoincrement())
  casino_id         Int?
  jurisdiction_id   Int
  jurisdictions     casino_p_casinos?           @relation(fields: [casino_id], references: [id], onDelete: Cascade)
  jurisdiction_data casino_p_lcb_juristrictions @relation(fields: [jurisdiction_id], references: [id], onDelete: Cascade)

  @@unique([casino_id, jurisdiction_id])
  @@index([casino_id])
}

model casino_p_banks {
  id                     Int                     @id @default(autoincrement())
  name                   String
  display                String
  image                  String?
  largeimage             String?
  description            String?
  rank                   Int?
  status                 Int?                    @default(1)
  w                      Int?
  h                      Int?
  tw                     Int?
  th                     Int?
  link                   String?
  vercel_image_url       String?
  vercel_image_size      Int?
  vercel_largeimage_url  String?
  vercel_largeimage_size Int?
  rad_updated            DateTime?               @updatedAt
  bank_data              casino_p_bank_connect[]

  @@index([vercel_image_url, vercel_image_size, vercel_largeimage_url, vercel_largeimage_size])
  @@index([rad_updated])
  @@index([status])
}

model casino_p_bank_connect {
  id        Int               @id @default(autoincrement())
  parent    Int?
  bank      Int?
  type      Int?
  bank_data casino_p_banks?   @relation(fields: [bank], references: [id], onDelete: Cascade)
  banklist  casino_p_casinos? @relation(fields: [parent], references: [id], onDelete: Cascade)

  @@unique([parent, bank])
  @@index([parent, bank])
}

model casino_p_bonus {
  id               Int              @id @default(autoincrement())
  parent           Int
  game             String?
  freespins        Int?
  freeplay         String?
  nodeposit        Int?
  deposit          Int?
  deposit_amount   Int?
  name             String?
  comments         String?
  position         Int?
  code             String?
  active           Int?
  playthrough      Int?
  type             String?
  link             String?
  max_cashout      String?
  cashable         Int?
  exclusive        Int?
  added            String?
  update_main      Int?
  currency         String?
  multi_currency   String?
  percent          Int?
  exported         String?
  geo              String?
  geo_deny         String?
  wager            Int?             @default(0)
  min_deposit      Int?
  url              String?
  geo_type         Int?             @default(0)
  geo_values       Int[]
  currencies       String?
  rad_updated      DateTime?        @updatedAt
  casino_p_casinos casino_p_casinos @relation(fields: [parent], references: [id], onDelete: Cascade)

  @@index([parent, freespins, nodeposit, deposit, deposit_amount, position, active, percent])
  @@index([rad_updated])
}

model casino_p_restrictions {
  id         Int              @id @default(autoincrement())
  casino     Int
  country    String
  allow      Int?
  casino_geo casino_p_casinos @relation(fields: [casino], references: [id], onDelete: Cascade)

  @@unique([casino, country])
  @@index([casino, country, allow])
}

model currency {
  id     Int    @id @default(autoincrement())
  name   String
  symbol String
}

model casino_p_lcb_countries_codes {
  idcountry   Int       @id
  countrycode String
  countryname String
  status      Int       @default(1)
  rad_updated DateTime?

  @@index([rad_updated])
  @@index([status])
}

model casino_p_transactions {
  id              Int      @id @default(autoincrement())
  casino          Int?
  game            Int?
  bonus           Int?
  deleted         Int      @default(0)
  implemented_at  DateTime
  sites_completed Int[]
}

model needs_approval {
  id       Int @id @default(autoincrement())
  casino   Int
  approved Int @default(0)
}

model outbounding {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  casinoId    Int?
  geo         String
  ip          String
  userAgent   String
  referer     String
  casino_outs casino_p_casinos? @relation(fields: [casinoId], references: [id], onDelete: Cascade)
}

model Newsletter {
  id                Int     @id @default(autoincrement())
  email             String
  siteId            Int
  verified          Int     @default(0)
  verificationToken String? @unique

  @@unique([email, siteId])
}

model slots_launch {
  id            Int     @id
  name          String
  slug          String
  description   String?
  url           String?
  thumb         String?
  provider_id   Int
  provider      String
  provider_slug String
  type_id       Int
  type          String
  type_slug     String
  theme_id      Int?
  theme         String?
  theme_slug    String?
  megaways      Int
  bonus_buy     Int
  progressive   Int
  featured      Int
  created_at    String
  updated_at    String
  published     Int
  afc_id        Int?
  casino_game   casino_p_games? @relation(fields: [afc_id], references: [game_id])
}

model slots_launch_providers {
  id         Int     @id
  name       String
  slug       String
  bio        String?
  markets    String?
  thumb      String?
  created_at String?
  updated_at String
}

model ImportedBonus {
  id               String              @id @default(cuid())
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  externalId       String?             @unique
  title            String
  casino           String
  code             String?
  validUntil       String
  publishDate      String
  visits           Int                 @default(0)
  likes            Int                 @default(0)
  dislikes         Int                 @default(0)
  players          String
  wagering         String
  minDeposit       String
  maxCashOut       String
  gameTypes        String
  notes            String
  casino_id        Int?
  currentPlayers   Int?                @default(0)
  endDate          DateTime?
  entryFee         Decimal?            @db.Decimal(10, 2)
  gameId           Int?
  isTournament     Boolean             @default(false)
  maxPlayers       Int?
  minPlayers       Int?
  prizePool        Decimal?            @db.Decimal(10, 2)
  startDate        DateTime?
  tournamentStatus String?
  tournamentType   String?
  registrationDate DateTime?
  mappedCasino     casino_p_casinos?   @relation(fields: [casino_id], references: [id])
  validGames       ImportedValidGame[]
  ValidGame        ValidGame[]

  @@index([casino])
  @@index([externalId])
  @@index([casino_id])
  @@index([isTournament])
  @@index([tournamentStatus])
  @@index([startDate, endDate])
}

model ImportedValidGame {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  name      String
  imageUrl  String
  bonusId   String
  slot_id   Int?
  bonus     ImportedBonus @relation(fields: [bonusId], references: [id], onDelete: Cascade)

  @@index([bonusId])
  @@index([slot_id])
}

model ValidGame {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  name      String
  imageUrl  String
  slot_id   Int?
  bonusId   String
  bonus     ImportedBonus @relation(fields: [bonusId], references: [id], onDelete: Cascade)

  @@index([bonusId])
  @@index([slot_id])
}

model CasinoNameMapping {
  id           Int              @id @default(autoincrement())
  importedName String
  systemName   String
  casinoId     Int
  active       Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  casino       casino_p_casinos @relation(fields: [casinoId], references: [id])

  @@unique([importedName, systemName], name: "importedName_systemName")
  @@index([importedName])
  @@index([systemName])
  @@index([casinoId])
}

model casino_p_games_image {
  game_image_id       Int            @id @default(autoincrement())
  game_image_url      String
  vercel_image_url    String?
  vercel_image_size   Int?
  game_image_alt_text String?
  game_image_name     String?
  game_image_parent   Int
  game_image_position Int?
  w                   Int?
  h                   Int?
  tw                  Int?
  th                  Int?
  status              String?
  game_images         casino_p_games @relation(fields: [game_image_parent], references: [game_id], onDelete: Cascade)
}

model casino_p_slot_details {
  id               Int            @id @default(autoincrement())
  parent           Int
  theme            String?        @db.Text
  wild             String?        @db.Text
  scatter          String?        @db.Text
  expanding        String?        @db.Text
  other            String?        @db.Text
  bonusround1      String?        @db.Text
  bonusround2      String?        @db.Text
  bonusround3      String?        @db.Text
  bonusround4      String?        @db.Text
  bonusround1act   String?        @db.Text
  bonusround2act   String?        @db.Text
  bonusround3act   String?        @db.Text
  bonusround4act   String?        @db.Text
  other2           String?        @db.Text
  bonusround5      String?        @db.Text
  bonusround5act   String?        @db.Text
  bonusround6      String?        @db.Text
  bonusround6act   String?        @db.Text
  bonusbuy         Int?
  addedby          Int?
  editedby         Int?
  updatetime       Int?
  needsupdate      Int?

  slot_theme       casino_p_games @relation(fields: [parent], references: [game_id], onDelete: Cascade)

  @@index([parent])
}

model casino_p_games {
  game_id                Int                          @id @default(autoincrement())
  game_land_based        String?
  game_name              String
  game_software          Int
  game_added             String?
  game_progressive       Int?
  game_random_jackpot    Int?
  game_demo              String?
  game_min_bet           String?
  game_max_bet           String?
  game_line_bet          String?
  game_max_payout        String?
  game_bonus_bet         String?
  game_decks             Int?
  game_live_dealer       Int?
  game_reels             Int?
  game_lines             Int?
  game_multi_spin        Int?
  game_bonus_round       Int?
  game_bonus_multipliers Int?
  game_scatters          Int?
  game_free_spins        Int?
  game_wild_slot         Int?
  game_theme             String?
  game_hands             Int?
  game_wild_cards        Int?
  status                 Int?
  game_image             String?
  game_updated           String?
  game_clean_name        String?
  game_payout            String?
  game_fixed_bet         String?
  vercel_image_url       String?
  vercel_image_size      Int?
  rad_updated           DateTime?
  review                 casino_p_descriptions_games[]
  software               casino_p_software             @relation(fields: [game_software], references: [id])
  game_images            casino_p_games_image[]
  slot_theme             casino_p_slot_details[]
  slots_launch_games     slots_launch[]

  @@index([game_software, vercel_image_url, vercel_image_size])
}

model casino_p_descriptions_games {
  id               Int            @id @default(autoincrement())
  parent           Int
  title            String?
  description      String?
  ordered          Int?
  type             Int?
  description_link String?
  record           String?
  static           Int?
  author_id        String?
  updated_at       DateTime?
  review           casino_p_games @relation(fields: [parent], references: [game_id], onDelete: Cascade, map: "description_game_fk")

  @@index([parent])
}

model slotNameMapping {
  id           Int      @id @default(autoincrement())
  importedName String
  systemName   String
  slotId       Int
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([importedName, systemName])
  @@index([slotId])
  @@index([importedName])
}

model Position {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  auctions    Auction[]
}

model Auction {
  startDate  DateTime
  endDate    DateTime
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  minBid     Float
  id         Int      @id @default(autoincrement())
  positionId Int
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)
  bids       Bid[]

  @@index([positionId])
}

model Bid {
  id        Int      @id @default(autoincrement())
  auctionId Int
  userId    String
  amount    Float
  createdAt DateTime @default(now())
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([auctionId])
  @@index([userId])
}

model UnifiedBonus {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  casinoId         Int?
  casinoName       String
  casinoCleanName  String?
  casinoButton     String?
  title            String
  code             String?
  publishDate      String?
  bonusType        String
  freespins        Int?
  depositAmount    Float?
  bonusAmount      Float?
  percentage       Int?
  isTournament     Boolean           @default(false)
  tournamentType   String?
  startDate        DateTime?
  endDate          DateTime?
  prizePool        Decimal?          @db.Decimal(10, 2)
  entryFee         Decimal?          @db.Decimal(10, 2)
  currentPlayers   Int?              @default(0)
  tournamentStatus String?
  wagering         String?
  minDeposit       String?
  maxCashOut       String?
  players          String?
  notes            String?
  validGames       Json?
  visits           Int               @default(0)
  likes            Int               @default(0)
  dislikes         Int               @default(0)
  importedBonusId  String?           @unique
  sourceType       String
  noDepositAmount  Float?
  maxBet           Float?
  setBet           Float?
  validUntil       String?
  previousDeposit  Boolean?
  casino           casino_p_casinos? @relation(fields: [casinoId], references: [id])

  @@index([casinoId])
  @@index([bonusType])
  @@index([isTournament])
  @@index([tournamentStatus])
  @@index([sourceType])
  @@index([validUntil])
}

model ppc_links {
  id        Int              @id @default(autoincrement())
  casino_id Int
  geo       String           @db.Char(2)
  url       String
  casino    casino_p_casinos @relation(fields: [casino_id], references: [id], onDelete: Cascade)

  @@unique([casino_id, geo], name: "casino_id_geo")
  @@index([casino_id])
  @@index([geo])
}

model Postback {
  id          String            @id @default(cuid())
  clickId     String?
  status      String
  amount      Float?
  currency    String?
  casinoId    Int?
  playerId    String?
  campaign    String?
  ipAddress   String?
  userAgent   String?
  rawData     Json?
  processedAt DateTime          @default(now())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  campaignId  String?
  depositId   String?
  promoId     String?
  visitId     String?
  casino      casino_p_casinos? @relation(fields: [casinoId], references: [id])

  @@index([clickId])
  @@index([casinoId])
  @@index([processedAt])
  @@index([campaignId])
  @@index([depositId])
  @@index([visitId])
}

model GameNameMapping {
  id              Int      @id @default(autoincrement())
  casino_game_id  Int
  slots_launch_id Int
  created_at      DateTime
  updated_at      DateTime

  @@index([casino_game_id])
  @@index([slots_launch_id])
}
model rad_generator_types {
  id                Int    @id @default(autoincrement())
  spin_name         String @default("")
  spin_replacements String @default("")
}

model rad_generator_subtypes {
  id         Int    @id @default(autoincrement())
  type_id    Int    @default(0)
  subtype_id Int    @default(0)
  subtype    String @default("")
  type       Int    @default(0)
}

model rad_generator_composer {
  composer_id   Int    @id @default(autoincrement())
  composer_name String @default("")
  type          Int    @default(0)
}

model rad_generator_composer_paragraphs {
  id              Int    @id @default(autoincrement())
  composer_id     Int    @default(0)
  place_order     Int    @default(0)
  paragraphs      String @default("")
  paragraph_head  String @default("")
  paragraph_as    Int    @default(0)
  restrictions    String @default("")
}

model rad_generator_composer_restrictions {
  id              Int    @id @default(autoincrement())
  constructor_id  Int    @default(0)
  composer_id     Int    @default(0)
  paragraph_id    Int    @default(0)
  sentence_id     Int    @default(0)
  required        Int    @default(0)
  restriction_active Int  @default(0)
}

model rad_generator_groups {
  group_id   Int    @id @default(autoincrement())
  group_name String @default("")
  group_type Int    @default(0)
}

model rad_generator_notes {
  note_id     Int    @id @default(autoincrement())
  note_text   String @default("")
  note_active Int    @default(0)
}

model rad_generator_paragraphs {
  paragraph_id    Int    @id @default(autoincrement())
  paragraph_name  String @default("")
  group_id        Int    @default(0)
  paragraph_type  Int    @default(0)
  paragraph_order Int    @default(0)
}

model rad_generator_paragraph_as {
  as_id           Int    @id @default(autoincrement())
  paragraph_id    Int    @default(0)
  paragraph_as    String? @default("")
  paragraph_group Int?    @default(0)
  as_name         String? @default("")
  as_type         Int?    @default(0)
}

model rad_generator_replacements {
  id                Int    @id @default(autoincrement())
  replacement_id    Int    @default(autoincrement())
  replacement_name  String @default("")
  replacement_active Int    @default(0)
  casino_id         Int?
  slotlaunch_id     Int?
  replacement_text  String @default("")
  replacement_type  Int    @default(0)
  description       String? @default("")
  rep_value         String? @default("")
  replacement       String? @default("")
  type              Int?    @default(0)
}

model rad_generator_sentence {
  sentence_id              Int    @id @default(autoincrement())
  paragraph_id             Int    @default(0)
  sentence_groups          Int    @default(0)
  sentence_name            String @default("")
  sentence_subtypes        String @default("0")
  sentence_subtype_reverse Int    @default(0)
  sentence_text            String @default("")
  sentence_active          Int    @default(0)
}

// Forum System Tables with ez_ prefix

model ez_forum_categories {
  id          String            @id @default(cuid())
  name        String
  slug        String            @unique
  description String?
  icon        String?           // emoji or icon name
  displayOrder Int              @default(0)
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  topics      ez_forum_topics[]

  @@index([slug])
  @@index([displayOrder])
  @@index([isActive])
}

model ez_forum_topics {
  id              String              @id @default(cuid())
  categoryId      String
  authorId        String
  title           String
  slug            String              @unique
  isPinned        Boolean             @default(false)
  isLocked        Boolean             @default(false)
  viewCount       Int                 @default(0)
  replyCount      Int                 @default(0)
  lastReplyAt     DateTime?
  lastReplyUserId String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  category        ez_forum_categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  author          User                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  posts           ez_forum_posts[]
  followers       ez_forum_topic_followers[]

  @@index([categoryId])
  @@index([authorId])
  @@index([slug])
  @@index([isPinned, lastReplyAt])
  @@index([createdAt])
}

model ez_forum_posts {
  id          String              @id @default(cuid())
  topicId     String
  authorId    String
  content     String              @db.Text
  isEdited    Boolean             @default(false)
  editedAt    DateTime?
  editedBy    String?
  isDeleted   Boolean             @default(false)
  deletedAt   DateTime?
  deletedBy   String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  topic       ez_forum_topics     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  author      User                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  attachments ez_forum_attachments[]

  @@index([topicId])
  @@index([authorId])
  @@index([createdAt])
  @@index([isDeleted])
}

model ez_forum_attachments {
  id          String          @id @default(cuid())
  postId      String
  url         String          // Vercel Blob URL
  filename    String
  mimeType    String
  size        Int             // bytes
  width       Int?            // for images
  height      Int?            // for images
  createdAt   DateTime        @default(now())

  post        ez_forum_posts  @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model ez_forum_private_messages {
  id          String                           @id @default(cuid())
  senderId    String
  subject     String
  content     String                           @db.Text
  createdAt   DateTime                         @default(now())

  sender      User                             @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  participants ez_forum_message_participants[]

  @@index([senderId])
  @@index([createdAt])
}

model ez_forum_message_participants {
  id          String                    @id @default(cuid())
  messageId   String
  userId      String
  isRead      Boolean                   @default(false)
  readAt      DateTime?
  isDeleted   Boolean                   @default(false)
  deletedAt   DateTime?

  message     ez_forum_private_messages @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user        User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([userId])
  @@index([messageId])
  @@index([isRead])
  @@index([isDeleted])
}

model ez_forum_topic_followers {
  id          String            @id @default(cuid())
  topicId     String
  userId      String
  createdAt   DateTime          @default(now())

  // Notification preferences
  emailNotifications Boolean       @default(true)
  unsubscribeToken   String        @unique @default(cuid())

  topic       ez_forum_topics   @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([topicId, userId])
  @@index([userId])
  @@index([topicId])
  @@index([unsubscribeToken])
}

// ===================================
// Notification System
// ===================================

enum NotificationType {
  PRIVATE_MESSAGE    // New PM received
  TOPIC_REPLY        // Reply in followed topic
  NEW_CASINO         // New casino added to database
  NEW_GAME           // New game added to database
  SYSTEM             // System announcements
  SUBSCRIPTION       // Subscription updates
  AFFILIATE_EARNING  // New affiliate commission earned
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String           // e.g., "New Private Message"
  message   String           // e.g., "John sent you a message"
  link      String?          // URL to navigate to when clicked
  icon      String?          // Optional emoji or icon name
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Optional metadata for different notification types
  metadata  Json?            // Store additional data (e.g., messageId, casinoId, etc.)

  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@index([userId, isRead])
}

// ===================================
// Affiliate Program System
// ===================================

enum CommissionStatus {
  PENDING    // Commission calculated but not yet paid
  PAID       // Commission has been paid out
  CANCELLED  // Commission cancelled (refund, fraud, etc.)
}

model AffiliateCommission {
  id              String          @id @default(cuid())
  referrerId      String          // User who will receive the commission
  referredUserId  String          // User who made the payment
  paymentId       String          // The payment that generated this commission
  subscriptionId  String?         // Optional: link to subscription

  // Commission details
  amount          Decimal         @db.Decimal(10, 2) // Commission amount in currency
  percentage      Decimal         @db.Decimal(5, 2)  // Percentage used for calculation
  currency        String          @default("USD")

  // Payment information
  paymentAmount   Decimal         @db.Decimal(10, 2) // Original payment amount

  // Status tracking
  status          CommissionStatus @default(PENDING)
  paidAt          DateTime?       // When commission was paid
  cancelledAt     DateTime?       // When commission was cancelled
  cancellationReason String?      // Reason for cancellation

  // Metadata
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  referrer        User            @relation("ReferrerCommissions", fields: [referrerId], references: [id], onDelete: Cascade)
  referredUser    User            @relation("ReferredUserCommissions", fields: [referredUserId], references: [id], onDelete: Cascade)
  payment         Payment         @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  subscription    Subscription?   @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)

  @@index([referrerId])
  @@index([referredUserId])
  @@index([paymentId])
  @@index([subscriptionId])
  @@index([status])
  @@index([createdAt])
  @@index([referrerId, status])
}
